package com.imp.prgs;

/*
 Element with left side smaller and right side greater
Given an unsorted array of size N. Find the first element in array such that all of its left elements are smaller and all right elements to it are greater than it.

*/
public class Perfect_Numb_Array_19 {
	static int findElement(int[] arr, int n) {
		// leftMax[i] stores maximum of arr[0..i-1]
		int[] leftMax = new int[n];
		leftMax[0] = Integer.MIN_VALUE;

		// Fill leftMax[]1..n-1]
		for (int i = 1; i < n; i++)
			leftMax[i] = Math.max(leftMax[i - 1], arr[i - 1]);

		// Initialize minimum from right
		int rightMin = Integer.MAX_VALUE;

		// Traverse array from right
		for (int i = n - 1; i >= 0; i--) {
			System.out.println("leftMax[i]--> "+ leftMax[i]+" arr[i] -->"+arr[i]+" "
					+ "rightMin-->"+rightMin);
			// Check if we found a required element
			if (leftMax[i] < arr[i] && rightMin > arr[i]) {
				
				if(i==0) {
					return -1;
				}else {
					return leftMax[i];
				}
			}
				

			// Update right minimum
			rightMin = Math.min(rightMin, arr[i]);
			
		}

		// If there was no element matching criteria
		return -1;

	}

	// Driver code
	public static void main(String args[]) {
		//int[] arr = { 5, 1, 4, 3, 6, 8, 10, 7, 9 }; //6
		//int[] arr ={4, 2, 5, 7};   //output 5
		//int[] arr = { 5, 6, 4, 1, 7, 12, 9, 1, 4, 1, 11, 5, 7, 1};  //
		int[] arr ={6 ,1 ,10}; 
		int n = arr.length;
		System.out.println("Index of the element is " + findElement(arr, n));
	}
}
