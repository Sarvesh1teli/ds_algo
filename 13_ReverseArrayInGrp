package com.imp.prgs;
/*
Given an array arr[] of positive integers of size N. Reverse every sub-array group of size K.
Input:N = 4, K = 3 arr[] = {5,6,8,9} Output: 8 6 5 9
*/
import java.util.Arrays;

//Time complexity of above solution is O(n). 
public class ReverseArrayInGrp_13 {
	public static void main(String[] args) {
		// int k = 2;
		// int arr[] = { 16, 17, 4, 3, 5, 2,7 }; //4 17 16 2 5 3 7
		// int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; // 3 2 1 6 5 4 9 8 7

		// int arr[] = {1, 2, 3, 4, 5, 6, 7, 8} ;//5 4 3 2 1 8 7 6
		// int k = 5;
		int arr[] = { 1, 2, 3, 4, 5, 6 };
		int k = 1;

		// int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};
		// int k = 10;
		int n = arr.length - 1;
		reverseArrayGrp_1(arr, k, n);
		System.out.println(Arrays.toString(arr));
	}

	private static void reverseArrayGrp_1(int[] arr, int k, int n) {

		int end = 0;

		for (int i = 0; i <= n;i = i + k) {
			int temp;
			int start = i;
			
			end = Math.min(i + k - 1, n-1);
			
			while (start < end) {
				temp = arr[start];
				arr[start] = arr[end];
				arr[end] = temp;
				start += 1;
				end -= 1;
			}
		}

	}
}
